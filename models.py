import numpy as np
import matplotlib.pyplot as plt

# Constants and parameters
m_total = 92  # Total mass (cyclist + bike) (kg)
g = 9.81  # Gravity (m/s^2)
C_d = 0.3  # Drag coefficient
rho = 1.225  # Air density (kg/m^3)
A = 0.5  # Frontal area of cyclist (m^2)
mu_r = 0.015  # Rolling resistance coefficient
m_disc_front = 0.2  # Mass of the front ventilated brake disc (kg)
m_disc_rear = 0.15  # Mass of the rear ventilated brake disc (kg)
c_disc = 500  # Specific heat capacity of the disc (J/kg°C)
delta_t = 0.1  # Time step (s)
v0 = 0.1  # Initial velocity (m/s)
h = 70  # Height of the slope (m)
theta = np.radians(10)  # Slope angle in radians
L = h / np.tan(theta)  # Length of the slope (m)
T_amb = 15  # Ambient temperature (°C)

# Ventilated disc parameters
kappa = 1.2  # Effective area increase due to ventilation
base_h_c = 50  # Base heat transfer coefficient (W/m²·K)
velocity_factor = 15  # Dependency on velocity for h_c
ventilated_effect = 10  # Additional convection effect due to ventilation

# Radiative cooling constants
epsilon = 0.8  # Emissivity of the brake disc
sigma = 5.67e-8  # Stefan-Boltzmann constant (W/m^2*K^4)

# Disc geometry
disc_radius = 0.18 / 2  # Radius of the disc (m)
A_disc = np.pi * disc_radius**2  # Surface area of the disc (m^2)
A_disc_effective = kappa * A_disc  # Effective area considering ventilation

# Braking distribution
front_brake_ratio = 0.70  # 70% braking force on the front disc
rear_brake_ratio = 1 - front_brake_ratio  # Remaining braking force on the rear disc

# Simulation function with distributed braking
def simulate_braking_with_release(F_brake_total, braking_start_distance, release_distance):
    t = [0]
    v = [v0]
    a = []
    x = [0]
    T_front = [T_amb]  # Front disc temperature
    T_rear = [T_amb]  # Rear disc temperature
    Q_front_accumulated = 0
    Q_rear_accumulated = 0

    heat_generated_front = []
    heat_generated_rear = []
    heat_convection_front = []
    heat_convection_rear = []
    heat_radiation_front = []
    heat_radiation_rear = []

    while x[-1] < L:
        F_g = m_total * g * np.sin(theta)  # Gravitational force
        F_d = 0.5 * C_d * rho * A * v[-1]**2  # Air drag
        F_r = mu_r * m_total * g * np.cos(theta)  # Rolling resistance

        # Apply braking only within the braking distance
        if x[-1] >= (L - braking_start_distance) and x[-1] <= (L - release_distance):
            F_brake_front = front_brake_ratio * F_brake_total
            F_brake_rear = rear_brake_ratio * F_brake_total
            F_neto = F_g - F_d - F_r - F_brake_total
            Q_generated_front = F_brake_front * delta_t * v[-1]  # Heat generated by front brake
            Q_generated_rear = F_brake_rear * delta_t * v[-1]  # Heat generated by rear brake
        elif x[-1] > (L - release_distance):  # Release the brakes
            F_neto = F_g - F_d - F_r
            Q_generated_front = 0
            Q_generated_rear = 0
        else:
            F_neto = F_g - F_d - F_r
            Q_generated_front = 0
            Q_generated_rear = 0

        heat_generated_front.append(Q_generated_front)
        heat_generated_rear.append(Q_generated_rear)

        a_n = F_neto / m_total  # Acceleration
        v_n = max(v[-1] + a_n * delta_t, 0.1)  # Velocity (non-negative)
        x_n = x[-1] + v[-1] * delta_t  # New position

        # Convection heat loss (front and rear)
        h_c = base_h_c + velocity_factor * v[-1]**0.8  # Dynamic heat transfer coefficient
        q_conv_front = h_c * A_disc_effective * (T_front[-1] - T_amb) * delta_t
        q_conv_rear = h_c * A_disc_effective * (T_rear[-1] - T_amb) * delta_t
        heat_convection_front.append(q_conv_front)
        heat_convection_rear.append(q_conv_rear)

        # Radiative heat loss (front and rear)
        T_front_k = T_front[-1] + 273.15
        T_rear_k = T_rear[-1] + 273.15
        T_amb_k = T_amb + 273.15
        q_rad_front = epsilon * sigma * A_disc_effective * ((T_front_k**4) - (T_amb_k**4)) * delta_t
        q_rad_rear = epsilon * sigma * A_disc_effective * ((T_rear_k**4) - (T_amb_k**4)) * delta_t
        heat_radiation_front.append(q_rad_front)
        heat_radiation_rear.append(q_rad_rear)

        # Net heat in discs
        Q_front_accumulated = max(Q_front_accumulated + Q_generated_front - (q_conv_front + q_rad_front), 0)
        Q_rear_accumulated = max(Q_rear_accumulated + Q_generated_rear - (q_conv_rear + q_rad_rear), 0)

        # Temperature increment in each step
        delta_T_front = Q_front_accumulated / (m_disc_front * c_disc)
        delta_T_rear = Q_rear_accumulated / (m_disc_rear * c_disc)
        T_front.append(T_amb + delta_T_front)
        T_rear.append(T_amb + delta_T_rear)

        # Store results
        a.append(a_n)
        v.append(v_n)
        x.append(x_n)
        t.append(t[-1] + delta_t)

    return t, v, a, T_front, T_rear, heat_generated_front, heat_generated_rear, heat_convection_front, heat_convection_rear, heat_radiation_front, heat_radiation_rear

# Simulate Scenario with release braking
t, v, a, T_front, T_rear, heat_generated_front, heat_generated_rear, heat_convection_front, heat_convection_rear, heat_radiation_front, heat_radiation_rear = simulate_braking_with_release(700, 100, 45)

# Configure font size and line width globally
plt.rcParams.update({'font.size': 14, 'lines.linewidth': 2})

# Plot results
plt.figure(figsize=(15, 25))

# Velocity vs Time
plt.subplot(5, 1, 1)
plt.plot(t, velocity_kmh, label="Velocity (km/h)", color="blue")
plt.xlabel("Time (s)")
plt.ylabel("Velocity (km/h)")
plt.title("Velocity over Time (Intense Braking)")
plt.grid(True)
plt.legend()

# Acceleration vs Time
plt.subplot(5, 1, 2)
plt.plot(t[:-1], a, label="Net Acceleration (m/s²)", color="black")
plt.xlabel("Time (s)")
plt.ylabel("Acceleration (m/s²)")
plt.title("Net Acceleration over Time")
plt.grid(True)
plt.legend()

# Front and Rear Disc Temperatures
plt.subplot(5, 1, 3)
plt.plot(t, T_front, label="Front Disc Temperature (°C)", color="red")
plt.plot(t, T_rear, label="Rear Disc Temperature (°C)", color="orange")
plt.xlabel("Time (s)")
plt.ylabel("Temperature (°C)")
plt.title("Front and Rear Disc Temperatures over Time")
plt.grid(True)
plt.legend()

# Heat components (Front Disc)
plt.subplot(5, 1, 4)
plt.plot(t[:-1], np.cumsum(heat_generated_front), label="Heat Generated (Front)", color="purple", linestyle="--")
plt.plot(t[:-1], np.cumsum(heat_convection_front), label="Heat Lost to Convection (Front)", color="blue", linestyle="--")
plt.plot(t[:-1], np.cumsum(heat_radiation_front), label="Heat Lost to Radiation (Front)", color="green", linestyle="--")
plt.xlabel("Time (s)")
plt.ylabel("Heat (J)")
plt.title("Heat Components for Front Disc")
plt.grid(True)
plt.legend()

plt.tight_layout()
plt.show()

